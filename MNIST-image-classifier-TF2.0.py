# -*- coding: utf-8 -*-
"""MNSIT-dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLeq91eeGRwnq6zo3LH9bWpNRuc4Go48
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# IMPORTING MNIST DATASET 
mnist = tf.keras.datasets.mnist

(x_train,y_train),(x_test,y_test) = mnist.load_data()
x_train,x_test = x_train/255 ,x_test/255
print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)

# BUILDING THE MODEL

model = tf.keras.models.Sequential([
        tf.keras.layers.Flatten(input_shape=(28,28)),
        tf.keras.layers.Dense(128,activation='relu'),   #layer 1 with relu activation and 128 neurons
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(10,activation='softmax')         
])

# COMPILE THE MODEL

model.compile(optimizer='sgd', 
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#TRAINING THE MODEL

result = model.fit(x=x_train, 
                   y=y_train, 
                   validation_data=(x_test,y_test),
                   epochs=500)

"""## PLOTING ACCURACY LOSS PER ITERATION ##"""

fig,axes = plt.subplots(nrows=1,ncols=2,figsize=(8,6),dpi=100)
#ax = fig.add_axes([0,0,1,1])
axes[0].plot(result.history['accuracy'],'r-.',label='Test set Accuracy')
axes[0].plot(result.history['val_accuracy'],'b--',label='Validation set Accuracy')
axes[0].grid()
axes[0].legend()

axes[1].plot(result.history['loss'],'r-.',label='Test set Loss')
axes[1].plot(result.history['val_loss'], 'b--',label = 'Validation set loss')
axes[1].grid()
axes[1].legend()

# EVALUATING THE MODEL

print(model.evaluate(x_test,y_test))

print(model.summary())

output_probability = model.predict(x_test)
output = np.argmax(output_probability,axis=1)

confusion = tf.math.confusion_matrix(labels=y_test, predictions=output)
print(confusion)

# PLOTTING CONFUSION MATRIX TO UNDERSTAND MISCLASSIFIED LABELS

f, ax = plt.subplots(figsize=(9, 6))
sns.heatmap(confusion, annot=True, fmt="d", linewidths=.5, ax=ax)
ax.set_title("Confusion matrix",fontsize=14)
ax.set_xlabel('True Label',fontsize=14)
ax.set_ylabel('Predicted Label',fontsize=14)
plt.show()

